
Prompt:

Voc√™ √© um consultor de desenvolvimento em nuvem, de apenas conselhos verificados em fontes confi√°veis e documenta√ß√µes, caso n√£o tenha certeza sobre alguma informa√ß√£o, diga diretamente e n√£o assuma, foque sempre na seguran√ßa, custo, e escalabilidade. Monte uma arquitetura na nuvem da AWS, seguindo as melhores praticas recomendadas pelo framework well-architected. A arquitetura deve conter um bucket hosteando um site est√°tico e um bucket de processamento, um API do API gateway para comunica√ß√£o com o front-end, pelo menos uma fila SQS+DLQ para desacoplamento, pelo menos uma fun√ß√£o lambda para o processamento no backend, todos os c√≥digos gerados, para front e back-end devem ter logging estruturado e usar vari√°veis de ambiente sempre que poss√≠vel, mas pode ter mais caso a arquitetura exija, uma tabela do dynamoDB para banco de dados, SNS para notificar os usu√°rios e o dentista da consulta marcada, bedrock (para fazer a an√°lise inicial e anamnese), Lex (interage com o cliente) e Textract (para retirar informa√ß√µes de documentos enviados), essa arquitetura est√° sujeita a altera√ß√µes, ent√£o pode recomendar alternativas ou mudan√ßas para arquitetura. A l√≥gica √©: somos uma empresa fict√≠cia chamada IAmigos, nos fornecemos solu√ß√µes em nuvem para seguradoras. O objetivo dessa solu√ß√£o √© resolver um problema de ades√£o aos planos de seguros dentais, est√£o havendo muitos problemas com dados sendo registrados errados e demora no processamento de sinistros. A solu√ß√£o envolve um aplicativo/site, hosteado na nuvem AWS, usando servi√ßos de IA para automatizar, agilizar e melhorar o processo. Fluxo, o usu√°rio acessa o chatbot devido a um problema dental, assumamos uma dor de dente, o chat recebe o usu√°rio, coleta as informa√ß√µes (nome, CPF, plano dental fict√≠cio, tier do plano dental, e perguntas de anamnese para o Bedrock, atrav√©s desses sintomas, tentar retornar um poss√≠vel progn√≥stico), ap√≥s isso, utilizando esse prognostico o Bedrock vai tentar retornar uma pre-aprova√ß√£o do servi√ßo com o plano dental (podem ser que tenha uma mudan√ßa nos servi√ßos ap√≥s a avalia√ß√£o do profissional, mas caso haja uma mudan√ßa, isso ser√° tratado em uma consulta posterior) caso a pre-aprova√ß√£o falhe devido a alguma impossibilidade ou erro, siga para o processo de encontrar consult√≥rios pr√≥ximos que aceitam o plano de sa√∫de fict√≠cio. Deve haver tamb√©m um fluxo de reembolso posterior a marca√ß√£o da consulta para o caso de falha da pre-aprova√ß√£o, um fluxo de reembolso, onde o usu√°rio inclui uma foto da nota fiscal, o fluxo avalia as informa√ß√µes e retorna se o reembolso foi aprovado ou rejeitado pelo plano. Essas informa√ß√µes s√£o registadas no DynamoDB. A inten√ß√£o √© que ao final do fluxo, o sistema retorne locais que aceitam o plano pr√≥ximos do usu√°rio, poss√≠vel prognostico, resultado da pre-avalia√ß√£o/fluxo de reembolso, e uma mensagem/email para o consult√≥rio com as informa√ß√µes pessoais + anamnese. Estruture sua resposta em vis√£o geral, passos para implementa√ß√£o, sugest√µes de melhora, c√°lculo de pre√ßo aproximado da arquitetura. Caso alguma resposta daqui para frente atinja o limite de caracteres ou alguma outra limita√ß√£o, explicite e divida a resposta em mais de uma mensagem. Caso precise alguma informa√ß√£o faltante, pergunte diretamente. 


CONTEXTO COMPLETO - IAMIGOS DENTAL MVP (FASE 1)

EMPRESA: IAmigos - Solu√ß√µes em nuvem para seguradoras
PROBLEMA: Baixa ades√£o e processamento lento de seguros dentais
OBJETIVO: MVP com automa√ß√£o via AWS + IA para pr√©-aprova√ß√µes e reembolsos

ARQUITETURA AWS MVP - SOMENTE LEX:
‚Ä¢ FRONTEND: S3 + CloudFront (site est√°tico HTML/CSS/JS)
‚Ä¢ BACKEND: Amazon Lex (chatbot) ‚Üí Lambda Orchestrador (monol√≠tica)
‚Ä¢ BANCO: DynamoDB com tabela √∫nica + GSI
‚Ä¢ IA/ML: Bedrock (Titan), Textract, Lex
‚Ä¢ NOTIFICA√á√ïES: SNS (2 t√≥picos - clientes/dentistas)
‚Ä¢ RASTREAMENTO: lexSessionId √∫nico cross-service

DECIS√ïES ARQUITETURAIS MVP:
‚Ä¢ COMUNICA√á√ÉO: 100% via Lex - frontend s√≥ conversa com Lex
‚Ä¢ PROCESSAMENTO: 100% s√≠ncrono - usu√°rio espera Textract terminar
‚Ä¢ AUTENTICA√á√ÉO: CPF como identificador (sem Cognito no MVP)
‚Ä¢ CONSULT√ìRIOS: DynamoDB com dados fict√≠cios (sem Google Maps)
‚Ä¢ EXCLUS√ïES MVP: API Gateway, SQS, Lambdas separadas

COMPONENTES IMPLEMENTADOS:

1. LAMBDA ORQUESTRADORA (handler principal)
   - lambda_handler: Processa APENAS eventos Lex
   - process_lex_event: Roteamento de inten√ß√µes Lex

2. DENTALCLAIMSPROCESSOR (classe central monol√≠tica)
   - __init__: Inicializa todos os managers (incluindo SQS n√£o utilizado)
   - _validate_environment: Valida vari√°veis AWS
   - process_lex_event: Orquestra fluxo completo via Lex
   - _process_pre_approval: Fluxo pr√©-aprova√ß√£o (Bedrock + valida√ß√£o)
   - _process_reimbursement: Fluxo reembolso (Textract s√≠ncrono)
   - _process_dentist_search: Busca consult√≥rios (DynamoDB)

3. MANAGERS ESPECIALIZADOS:
   ‚Ä¢ AIAnalyzer (Bedrock Titan)
     - analyze_symptoms: An√°lise sintomas + progn√≥stico
     - _build_titan_prompt: Prompt engineering dental
     - _parse_titan_response: Extrai JSON da resposta

   ‚Ä¢ DocumentProcessor (Textract + S3) 
     - process_receipt: Analisa NF/recibos (S√çNCRONO)
     - _extract_expense_data: Extrai dados estruturados
     - _extract_currency_value: Processa valores monet√°rios

   ‚Ä¢ ClaimValidator (Regras de neg√≥cio)
     - validate_pre_approval_slots: Valida dados pr√©-aprova√ß√£o
     - validate_reimbursement_slots: Valida dados reembolso
     - validate_reimbursement_data: Compara documento vs declarado
     - check_plan_coverage: Regras cobertura por plano

   ‚Ä¢ DataManager (DynamoDB)
     - save_pre_approval_claim: Persiste pr√©-aprova√ß√£o
     - save_reimbursement_claim: Persiste reembolso  
     - save_search_record: Persiste buscas

   ‚Ä¢ NotificationManager (SNS)
     - send_approval_notifications: Notifica cliente+dentista
     - send_reimbursement_notification: Notifica apenas cliente
     - _build_*_message: Templates em portugu√™s

FLUXOS DE NEG√ìCIO MVP:

1. PR√â-APROVA√á√ÉO (conversacional):
   Frontend ‚Üí Lex ‚Üí Lambda ‚Üí Bedrock ‚Üí Validador ‚Üí DynamoDB ‚Üí SNS ‚Üí Lex ‚Üí Frontend

2. REEMBOLSO (s√≠ncrono):
   Frontend ‚Üí Lex ‚Üí Lambda ‚Üí Textract ‚Üí Validador ‚Üí DynamoDB ‚Üí SNS ‚Üí Lex ‚Üí Frontend

3. BUSCA DENTISTAS:
   Frontend ‚Üí Lex ‚Üí Lambda ‚Üí DynamoDB ‚Üí Lex ‚Üí Frontend

FRONTEND HTML/CSS (100% LEX):
‚Ä¢ index.html - Dashboard principal
‚Ä¢ chatbot.html - Interface Lex pr√©-aprova√ß√£o  
‚Ä¢ upload.html - Interface reembolsos (via Lex)
‚Ä¢ clinics.html - Busca dentistas (via Lex)
‚Ä¢ status.html - Acompanhamento (via Lex)

VARI√ÅVEIS AMBIENTE:
DYNAMO_TABLE, DOCUMENTS_BUCKET, SNS_TOPIC_CLIENTES, 
SNS_TOPIC_DENTISTAS, BEDROCK_MODEL_ID, SQS_QUEUE_URL (n√£o usado)

PR√ìXIMOS PASSOS IMEDIATOS:
1. Completar frontend HTML/CSS (upload.html, clinics.html, status.html)
2. Configurar Amazon Lex com intents
3. Deploy infraestrutura Terraform
4. Testes integrados end-to-end

MELHORIAS FUTURAS (FASE 2):
‚Ä¢ API Gateway para endpoints espec√≠ficos
‚Ä¢ SQS para processamento ass√≠ncrono  
‚Ä¢ Separa√ß√£o de Lambdas
‚Ä¢ Amazon Cognito para autentica√ß√£o
‚Ä¢ Google Maps integration

MODO OPERACIONAL MVP:
‚Ä¢ Frontend ‚Üí SOMENTE Lex
‚Ä¢ Processamento ‚Üí 100% s√≠ncrono  
‚Ä¢ Foco ‚Üí Experi√™ncia usu√°rio dental simplificada
‚Ä¢ Valida√ß√£o ‚Üí Mercado r√°pido com custo m√≠nimo

MODO OPERACIONAL: Enviar componentes por vez, validar cada passo, focar seguran√ßa/custo/escalabilidade.

---------------------------------------------------------------------------------------------------------------------------------------


üìã CHECKLIST COMPLETO DO PROJETO
‚úÖ J√Å REALIZADOS
AN√ÅLISE E PLANEJAMENTO

Mapeamento completo dos requisitos de neg√≥cio

Defini√ß√£o da arquitetura AWS

An√°lise de custos estimados (~$68-133/m√™s)

Identifica√ß√£o de melhorias de seguran√ßa e performance

C√ìDIGO BACKEND

Lambda Orquestradora (handler principal)

DentalClaimsProcessor (classe central)

AIAnalyzer (Bedrock integration)

DocumentProcessor (Textract integration)

ClaimValidator (regras de neg√≥cio)

DataManager (DynamoDB operations)

NotificationManager (SNS integration)

INFRAESTRUTURA

Template Terraform completo

Pol√≠ticas IAM granularizadas

Estrutura de vari√°veis de ambiente

üöß PR√ìXIMOS PASSOS (EM ANDAMENTO)
INFRAESTRUTURA

Configurar Amazon Lex (chatbot)

Implementar CloudFront + S3 para frontend

Configurar API Gateway endpoints

Implementar SQS + DLQ properly

Criar Lambda Processor separada

BACKEND

Implementar fluxo ass√≠ncrono com SQS

Adicionar retry logic com exponential backoff

Implementar cache para consultas frequentes

Adicionar valida√ß√£o de documentos (formatos suportados)

FRONTEND ‚Üê PR√ìXIMO FOCO

Criar interface web est√°tica (React/Vue)

Integrar com Amazon Lex Web UI

Componente de upload de documentos

Dashboard de status de claims

---------------------------------------------------------------------------------------------------------------------------------------

Para PR√â-APROVA√á√ÉO:
text
1. User ‚Üí Frontend ‚Üí Lex: "Estou com dor de dente"
2. Lex ‚Üí Lambda: Evento Lex com intent "SolicitarPreAprovacao"  
3. Lambda ‚Üí AIAnalyzer: analyze_symptoms()
4. Lambda ‚Üí ClaimValidator: check_plan_coverage()
5. Lambda ‚Üí DataManager: save_pre_approval_claim()
6. Lambda ‚Üí NotificationManager: send_approval_notifications()
7. Lambda ‚Üí Lex: Resposta formatada
8. Lex ‚Üí Frontend: Mensagem final
Para REEMBOLSO (ATUAL - S√çNCRONO):
text
1. User ‚Üí Frontend ‚Üí Lex: "Quero reembolso" + documentKey
2. Lex ‚Üí Lambda: Evento Lex com intent "SolicitarReembolso"
3. Lambda ‚Üí DocumentProcessor: process_receipt()  ‚Üê S√çNCRONO!
4. Lambda ‚Üí ClaimValidator: validate_reimbursement_data()
5. Lambda ‚Üí DataManager: save_reimbursement_claim()
6. Lambda ‚Üí NotificationManager: send_reimbursement_notification()
7. Lambda ‚Üí Lex: Resposta formatada
8. Lex ‚Üí Frontend: Resultado do reembolso